// This file is generated by kxml_compiler from simple.xml.
// All changes you do to this file will be lost.
/*
    This file is part of KDE.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
    USA.
*/

#include "simple.h"

#include <QtDebug>
#include <QFile>
#include <QDomDocument>
#include <QtCore/QTextStream>
#include <QtCore/QtDebug>
#include <QtCore/QFile>

QString indent( int n = 0 )
{
  static int i = 0;
  i += n;
  QString space;
  return space.fill( ' ', i );
}

void Food::setName( const QString &v )
{
  mName = v;
}

QString Food::name() const
{
  return mName;
}

void Food::setTaste( const QString &v )
{
  mTaste = v;
}

QString Food::taste() const
{
  return mTaste;
}

Food Food::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "food" ) {
    qCritical() << "Expected 'food', got '" <<element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Food();
  }

  Food result = Food();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "name" ) {
      result.setName( e.text() );
    }
    else if ( e.tagName() == "taste" ) {
      result.setTaste( e.text() );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

QString Food::writeElement()
{
  QString xml;
  xml += indent() + "<food>\n";
  indent( 2 );
  xml += indent() + "<name>" + name() + "</name>\n";
  xml += indent() + "<taste>" + taste() + "</taste>\n";
  indent( -2 );
  xml += indent() + "</food>\n";
  return xml;
}


void Simple::addFood( const Food &v )
{
  mFoodList.append( v );
}

void Simple::setFoodList( const Food::List &v )
{
  mFoodList = v;
}

Food::List Simple::foodList() const
{
  return mFoodList;
}

Simple Simple::parseElement( const QDomElement &element, bool *ok )
{
  if ( element.tagName() != "simple" ) {
    qCritical() << "Expected 'simple', got '" <<element.tagName() << "'.";
    if ( ok ) *ok = false;
    return Simple();
  }

  Simple result = Simple();

  QDomNode n;
  for( n = element.firstChild(); !n.isNull(); n = n.nextSibling() ) {
    QDomElement e = n.toElement();
    if ( e.tagName() == "food" ) {
      bool ok;
      Food o = Food::parseElement( e, &ok );
      if ( ok ) result.addFood( o );
    }
  }


  if ( ok ) *ok = true;
  return result;
}

QString Simple::writeElement()
{
  QString xml;
  xml += indent() + "<simple>\n";
  indent( 2 );
  foreach( Food e, foodList() ) {
    xml += e.writeElement();
  }
  indent( -2 );
  xml += indent() + "</simple>\n";
  return xml;
}

Simple Simple::parseFile( const QString &filename, bool *ok )
{
  QFile file( filename );
  if ( !file.open( QIODevice::ReadOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    if ( ok ) *ok = false;
    return Simple();
  }

  QString errorMsg;
  int errorLine, errorCol;
  QDomDocument doc;
  if ( !doc.setContent( &file, false, &errorMsg, &errorLine, &errorCol ) ) {
    qCritical() << errorMsg << " at " << errorLine << "," << errorCol;
    if ( ok ) *ok = false;
    return Simple();
  }

  qDebug() << "CONTENT:" << doc.toString();

  bool documentOk;
  Simple c = parseElement( doc.documentElement(), &documentOk );
  if ( ok ) {
    *ok = documentOk;
  }
  return c;
}

bool Simple::writeFile( const QString &filename )
{
  QFile file( filename );
  if ( !file.open( QIODevice::WriteOnly ) ) {
    qCritical() << "Unable to open file '" << filename << "'";
    return false;
  }

  QTextStream ts( &file );
  ts << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  ts << writeElement();
  file.close();

  return true;
}
